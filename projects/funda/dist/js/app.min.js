"use strict";function _defineProperty(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}var APP=APP||{};APP.launcher=function(){function e(){document.addEventListener("DOMContentLoaded",function(){APP.geo.getLocation()})}return{init:e}}(),APP.launcher.init(),APP.data=function(e){function t(e){return new Promise(function(t,o){var n=new XMLHttpRequest;n.open("GET",e,!0),n.onload=function(){this.status>=200&&this.status<300?t(n.response):o({status:this.status,statusText:n.statusText})},n.onerror=function(){o({status:this.status,statusText:n.statusText})},n.send()})}function o(e){var t="json",o="e2d60e885b8742d4b0648300e3703bd7",n="koop",e=e,i="1",a="25",r="http://funda.kyrandia.nl/feeds/Aanbod.svc/"+t+"/"+o+"/?type="+n+"&zo=/"+e+"&page="+i+"&pagesize="+a;APP.data.request(r).then(function(t){var o=JSON.parse(t),n=[];[].forEach.call(o.Objects,function(e){if(1==e.HeeftVideo){var t={id:e.Id};n.push(t)}}),console.log(n),APP.router.init(n,e)})}function n(e){var t="json",o="e2d60e885b8742d4b0648300e3703bd7",n="koop",e=e,i="1",a="25",r="http://funda.kyrandia.nl/feeds/Aanbod.svc/"+t+"/"+o+"/?type="+n+"&zo=/"+e+"&page="+i+"&pagesize="+a;APP.data.request(r).then(function(e){var t=JSON.parse(e);console.log(t);var o=[];[].forEach.call(t.Objects,function(e){var t={id:e.Id,title:e.Adres,photo:e.FotoLargest,postalcode:e.Postcode,place:e.Woonplaats,price:e.Prijs.Koopprijs};o.push(t)}),console.log(o),APP.page.houseFavourites(o)})}function i(e){var t="json",o="e2d60e885b8742d4b0648300e3703bd7",e=e,n="koop",i="http://funda.kyrandia.nl/feeds/Aanbod.svc/"+t+"/detail/"+o+"/"+n+"/"+e+"/";APP.data.request(i).then(function(e){var t=JSON.parse(e);console.log(t);var o,n,i,a=[];for(o=0;o<t.Media.length-12;o++)n=t.Media[o],void 0!=n.MediaItems[3]&&(i=n.MediaItems[3].Url),console.log(i),a.push({photo:i});console.log(a);var r=[],s={id:t.InternalId,title:t.Titels[0].Omschrijving,photos:a,description:t.VolledigeOmschrijving,price:t.KoopPrijs,url:t.URL};r.push(s),console.log(r),APP.page.houseDetail(r)})}function a(e,t){var o="json",n="e2d60e885b8742d4b0648300e3703bd7",e=e,i="koop",a="http://funda.kyrandia.nl/feeds/Aanbod.svc/"+o+"/detail/"+n+"/"+i+"/"+e+"/";APP.data.request(a).then(function(o){var n=JSON.parse(o),i=function(o){var n=0,i=t.length;for(n;i>n;n+=1)if(t[n].id===e)return t[n+1];return"not found"},a=function(o){var n=0,i=t.length;for(n;i>n;n+=1)if(t[n].id===e)return t[n-1];return"not found"},r=i(e),s=a(e);if(void 0==s)var u={id:e,nextID:r.id,title:n.Titels[0].Omschrijving,buyPrice:n.Prijs.Koopprijs,videoURL:n.Video.Videos[0].Cdns[0].Url};else if(void 0==r)var u={id:e,prevID:s.id,title:n.Titels[0].Omschrijving,buyPrice:n.Prijs.Koopprijs,videoURL:n.Video.Videos[0].Cdns[0].Url};else var u={id:e,nextID:r.id,prevID:s.id,title:n.Titels[0].Omschrijving,buyPrice:n.Prijs.Koopprijs,videoURL:n.Video.Videos[0].Cdns[0].Url};console.log(u),APP.page.houseVideo(u)})}return _defineProperty({request:t,getHouses:o,getHouseFavourites:n,getHouseVideo:a,getHouseDetail:i},"getHouseDetail",i)}(),APP.geo=function(){function e(){navigator.geolocation&&navigator.geolocation.getCurrentPosition(t,o,{enableHighAccuracy:!0,maximumAge:0})}function t(e){var t=["https://nominatim.openstreetmap.org/reverse?format=json&lat=","&lon="],o=e.coords.latitude,n=e.coords.longitude,i="&zoom=13&addressdetails=1",a=t[0]+o+t[1]+n+i;APP.data.request(a).then(function(e){var t=JSON.parse(e),o=t.address.city||t.address.town;localStorage.setItem("Location",o),console.log(o),APP.data.getHouses(o)})}function o(){console.log("an error has occured")}return{getLocation:e,displayPosition:t}}(),APP.page=function(){function e(e){APP.data.request("./dist/templates/house-videos.mst").then(function(t){n.innerHTML=Mustache.render(t,e),i.classList.remove("active"),APP.storage.init()})}function t(e){APP.data.request("./dist/templates/house-detail.mst").then(function(t){n.innerHTML=Mustache.render(t,e),i.classList.remove("active")})}function o(e){if(null!=localStorage.getItem("houseID"))var t=localStorage.getItem("houseID");else var t=[];var e=e.filter(function(e){return-1!=t.indexOf(e.id)});console.log(e),APP.data.request("./dist/templates/house-favourites.mst").then(function(t){n.innerHTML=Mustache.render(t,e),i.classList.remove("active"),APP.storage.init()})}var n=document.querySelector("main"),i=document.getElementById("loader");return{houseVideo:e,houseDetail:t,houseFavourites:o}}(),APP.router=function(){function e(e,t){window.location.hash||(window.location="#videoID="+e[0].id),routie({"videoID=:ID":function(t){APP.data.getHouseVideo(t,e)},"houseDetail=:ID":function(e){APP.data.getHouseDetail(e)},favourites:function(){APP.data.getHouseFavourites(t)}})}return{init:e}}();var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e};APP.storage=function(){function e(){function e(e){e.preventDefault();var i=this.getAttribute("value");o.push(i),this.classList.remove("active");for(var a=0;a<n.length;a++){for(var r=n[a],s=0,u=0;u<n.length;u++)n[u]==o[a]&&s++;if(s>1)for(var c=0;c<n.length;c++)n[c]==r&&(n.splice(c,1),c-=1)}[].forEach.call(n,function(e){var t=document.querySelector('.favourite-btn[value="'+e+'"]');t&&t.classList.add("active")}),t("houseID",n)}function t(e,t){function o(e,t,o){var n=new Date;n.setTime(n.getTime()+24*o*60*60*1e3);var i="; expires="+n.toGMTString();document.cookie=e+"="+t+i+"; path=/"}function n(e){for(var t=e+"=",o=document.cookie.split(";"),n=0,i=o.length;i>n;n++){for(var a=o[n];" "===a.charAt(0);)a=a.substring(1,a.length);if(0===a.indexOf(t))return a.substring(t.length,a.length)}return null}var i;try{localStorage.test=1,i=!0}catch(a){i=!1}if("undefined"!=typeof t&&null!==t&&("object"===("undefined"==typeof t?"undefined":_typeof(t))&&(t=JSON.stringify(t)),i?localStorage.setItem(e,t):o(e,t,30)),"undefined"==typeof t){i?data=localStorage.getItem(e):data=n(e);try{data=JSON.parse(data)}catch(a){data=data}return data}null===t&&(i?localStorage.removeItem(e):o(e,"",-1))}if(null===localStorage.getItem("houseID")||""===localStorage.getItem("houseID"))var o=[];else var o=JSON.parse(localStorage.getItem("houseID"));var n=o,i=document.querySelectorAll(".favourite-btn");[].forEach.call(n,function(e){var t=document.querySelector('.favourite-btn[value="'+e+'"]');t&&t.classList.add("active")}),[].forEach.call(i,function(t){t.addEventListener("click",e,!1)})}return{init:e}}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5taW4uanMiLCJhcHAuanMiLCJkYXRhLmpzIiwiZ2VvLmpzIiwicGFnZXMuanMiLCJyb3V0ZXIuanMiLCJzdG9yYWdlLmpzIl0sIm5hbWVzIjpbIl9kZWZpbmVQcm9wZXJ0eSIsIm9iaiIsImtleSIsInZhbHVlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJBUFAiLCJsYXVuY2hlciIsImluaXQiLCJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJnZW8iLCJnZXRMb2NhdGlvbiIsImRhdGEiLCJjaXR5IiwicmVxdWVzdCIsInVybCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwib25sb2FkIiwidGhpcyIsInN0YXR1cyIsInJlc3BvbnNlIiwic3RhdHVzVGV4dCIsIm9uZXJyb3IiLCJzZW5kIiwiZ2V0SG91c2VzIiwib2JqZWN0VHlwZSIsImFwaUtleSIsInR5cGUiLCJwYWdlTnVtYmVyIiwicGFnZVNpemUiLCJhcGlVUkwiLCJ0aGVuIiwiaG91c2VEYXRhIiwiSlNPTiIsInBhcnNlIiwiaG91c2VJRHMiLCJmb3JFYWNoIiwiY2FsbCIsIk9iamVjdHMiLCJob3VzZSIsIkhlZWZ0VmlkZW8iLCJJRHMiLCJpZCIsIklkIiwicHVzaCIsImNvbnNvbGUiLCJsb2ciLCJyb3V0ZXIiLCJnZXRIb3VzZUZhdm91cml0ZXMiLCJvYmplY3QiLCJvYmplY3RzIiwidGl0bGUiLCJBZHJlcyIsInBob3RvIiwiRm90b0xhcmdlc3QiLCJwb3N0YWxjb2RlIiwiUG9zdGNvZGUiLCJwbGFjZSIsIldvb25wbGFhdHMiLCJwcmljZSIsIlByaWpzIiwiS29vcHByaWpzIiwicGFnZSIsImhvdXNlRmF2b3VyaXRlcyIsImdldEhvdXNlRGV0YWlsIiwiSUQiLCJpIiwibWVkaWEiLCJsYXJnZVBob3Rvc1VybCIsInBob3RvcyIsIk1lZGlhIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiTWVkaWFJdGVtcyIsIlVybCIsIkludGVybmFsSWQiLCJUaXRlbHMiLCJPbXNjaHJpanZpbmciLCJkZXNjcmlwdGlvbiIsIlZvbGxlZGlnZU9tc2NocmlqdmluZyIsIktvb3BQcmlqcyIsIlVSTCIsImhvdXNlRGV0YWlsIiwiZ2V0SG91c2VWaWRlbyIsImhvdXNlRGV0YWlsRGF0YSIsIm5leHRJdGVtIiwibWF4IiwicHJldkl0ZW0iLCJuZXh0SUQiLCJwcmV2SUQiLCJidXlQcmljZSIsInZpZGVvVVJMIiwiVmlkZW8iLCJWaWRlb3MiLCJDZG5zIiwiaG91c2VWaWRlbyIsIm5hdmlnYXRvciIsImdlb2xvY2F0aW9uIiwiZ2V0Q3VycmVudFBvc2l0aW9uIiwiZGlzcGxheVBvc2l0aW9uIiwiZGlzcGxheUVycm9yIiwiZW5hYmxlSGlnaEFjY3VyYWN5IiwibWF4aW11bUFnZSIsInBvc2l0aW9uIiwiZ3BzVG9DaXR5IiwibGF0IiwiY29vcmRzIiwibGF0aXR1ZGUiLCJsb24iLCJsb25naXR1ZGUiLCJ6b29tIiwiQ2l0eVVybCIsImNpdHlEYXRhIiwiYWRkcmVzcyIsInRvd24iLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwidGVtcGxhdGUiLCJfbWFpblNlbGVjdG9yIiwiaW5uZXJIVE1MIiwiTXVzdGFjaGUiLCJyZW5kZXIiLCJfbG9hZGVyIiwiY2xhc3NMaXN0IiwicmVtb3ZlIiwic3RvcmFnZSIsImdldEl0ZW0iLCJmaWx0ZXIiLCJjIiwiaW5kZXhPZiIsInF1ZXJ5U2VsZWN0b3IiLCJnZXRFbGVtZW50QnlJZCIsIndpbmRvdyIsImxvY2F0aW9uIiwiaGFzaCIsInJvdXRpZSIsInZpZGVvSUQ9OklEIiwiaG91c2VEZXRhaWw9OklEIiwiZmF2b3VyaXRlcyIsIl90eXBlb2YiLCJTeW1ib2wiLCJpdGVyYXRvciIsImNvbnN0cnVjdG9yIiwic3RvcmVJRCIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCJjbGlja2VkSUQiLCJnZXRBdHRyaWJ1dGUiLCJhcnJheUlEIiwiaCIsIm5ld0FycmF5SUQiLCJjdXJJdGVtIiwiZm91bmRDb3VudCIsImoiLCJzcGxpY2UiLCJfZmF2b3VyaXRlQnV0dG9uSUQiLCJhZGQiLCJhZGRTdG9yYWdlIiwiY3JlYXRlQ29va2llIiwiZXhwIiwiZGF0ZSIsIkRhdGUiLCJzZXRUaW1lIiwiZ2V0VGltZSIsImV4cGlyZXMiLCJ0b0dNVFN0cmluZyIsImNvb2tpZSIsInJlYWRDb29raWUiLCJuYW1lRVEiLCJjYSIsInNwbGl0IiwiY2hhckF0Iiwic3Vic3RyaW5nIiwibHNTdXBwb3J0IiwidGVzdCIsImUiLCJzdHJpbmdpZnkiLCJyZW1vdmVJdGVtIiwiX2Zhdm91cml0ZUJ1dHRvbiIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJidXR0b24iXSwibWFwcGluZ3MiOiJBQUFBLFlBMkJBLFNBQVNBLGlCQUFnQkMsRUFBS0MsRUFBS0MsR0FBaUssTUFBcEpELEtBQU9ELEdBQU9HLE9BQU9DLGVBQWVKLEVBQUtDLEdBQU9DLE1BQU9BLEVBQU9HLFlBQVksRUFBTUMsY0FBYyxFQUFNQyxVQUFVLElBQWtCUCxFQUFJQyxHQUFPQyxFQUFnQkYsRUN2QjNNLEdBQUlRLEtBQU1BLE9BTVZBLEtBQUlDLFNBQVksV0FFWixRQUFTQyxLQUNMQyxTQUFTQyxpQkFBaUIsbUJBQW9CLFdBQzFDSixJQUFJSyxJQUFJQyxnQkFJaEIsT0FDSUosS0FBTUEsTUFLZEYsSUFBSUMsU0FBU0MsT0NyQmJGLElBQUlPLEtBQVEsU0FBVUMsR0FDbEIsUUFBU0MsR0FBUUMsR0FDYixNQUFPLElBQUlDLFNBQVEsU0FBVUMsRUFBU0MsR0FDbEMsR0FBSUMsR0FBTSxHQUFJQyxlQUNkRCxHQUFJRSxLQUFLLE1BQU9OLEdBQUssR0FDckJJLEVBQUlHLE9BQVMsV0FDTEMsS0FBS0MsUUFBVSxLQUFPRCxLQUFLQyxPQUFTLElBQ3BDUCxFQUFRRSxFQUFJTSxVQUVaUCxHQUNJTSxPQUFRRCxLQUFLQyxPQUNiRSxXQUFZUCxFQUFJTyxjQUk1QlAsRUFBSVEsUUFBVSxXQUNWVCxHQUNJTSxPQUFR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QUssS0FDN0UwRixJQUNGQSxFQUFtQmhDLFVBQVVpQyxJQUFJLGVBS2hDeEgsUUFBUUMsS0FBSzZJLEVBQWtCLFNBQVNFLEdBRWpDQSxFQUFPaEwsaUJBQWlCLFFBQVMySSxHQUFTLEtBK0hyRCxPQUNPN0ksS0FBTUEiLCJmaWxlIjoiYXBwLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cdE5BTUVTUEFDRVxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xudmFyIEFQUCA9IEFQUCB8fCB7fTtcbid1c2Ugc3RyaWN0JztcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgIExBVU5DSCBBUFBcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbkFQUC5sYXVuY2hlciA9IGZ1bmN0aW9uICgpIHtcblxuICAgIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIEFQUC5nZW8uZ2V0TG9jYXRpb24oKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGluaXQ6IGluaXRcbiAgICB9O1xufSgpO1xuXG5BUFAubGF1bmNoZXIuaW5pdCgpO1xuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cdERBVEEgUkVRVUVTVFxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuQVBQLmRhdGEgPSBmdW5jdGlvbiAoY2l0eSkge1xuICAgIGZ1bmN0aW9uIHJlcXVlc3QodXJsKSB7XG4gICAgICAgIC8vIHNyYzogaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zMDAwODExNC9ob3ctZG8taS1wcm9taXNpZnktbmF0aXZlLXhoclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICAgICAgeGhyLm9wZW4oJ0dFVCcsIHVybCwgdHJ1ZSk7XG4gICAgICAgICAgICB4aHIub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnN0YXR1cyA+PSAyMDAgJiYgdGhpcy5zdGF0dXMgPCAzMDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh4aHIucmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IHRoaXMuc3RhdHVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzVGV4dDogeGhyLnN0YXR1c1RleHRcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJlamVjdCh7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1czogdGhpcy5zdGF0dXMsXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1c1RleHQ6IHhoci5zdGF0dXNUZXh0XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgeGhyLnNlbmQoKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGdldEhvdXNlcyhjaXR5KSB7XG4gICAgICAgIHZhciBvYmplY3RUeXBlID0gJ2pzb24nLFxuICAgICAgICAgICAgYXBpS2V5ID0gJ2UyZDYwZTg4NWI4NzQyZDRiMDY0ODMwMGUzNzAzYmQ3JyxcbiAgICAgICAgICAgIHR5cGUgPSAna29vcCcsXG4gICAgICAgICAgICBjaXR5ID0gY2l0eSxcbiAgICAgICAgICAgIHBhZ2VOdW1iZXIgPSAnMScsXG4gICAgICAgICAgICBwYWdlU2l6ZSA9ICcyNScsXG4gICAgICAgICAgICBhcGlVUkwgPSAnaHR0cDovL2Z1bmRhLmt5cmFuZGlhLm5sL2ZlZWRzL0FhbmJvZC5zdmMvJyArIG9iamVjdFR5cGUgKyAnLycgKyBhcGlLZXkgKyAnLz90eXBlPScgKyB0eXBlICsgJyZ6bz0vJyArIGNpdHkgKyAnJnBhZ2U9JyArIHBhZ2VOdW1iZXIgKyAnJnBhZ2VzaXplPScgKyBwYWdlU2l6ZSArICcnO1xuXG4gICAgICAgIEFQUC5kYXRhLnJlcXVlc3QoYXBpVVJMKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgdmFyIGhvdXNlRGF0YSA9IEpTT04ucGFyc2UocmVzcG9uc2UpO1xuICAgICAgICAgICAgdmFyIGhvdXNlSURzID0gW107XG5cbiAgICAgICAgICAgIFtdLmZvckVhY2guY2FsbChob3VzZURhdGEuT2JqZWN0cywgZnVuY3Rpb24gKGhvdXNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhvdXNlLkhlZWZ0VmlkZW8gPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgSURzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGhvdXNlLklkXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGhvdXNlSURzLnB1c2goSURzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgY29uc29sZS5sb2coaG91c2VJRHMpO1xuICAgICAgICAgICAgQVBQLnJvdXRlci5pbml0KGhvdXNlSURzLCBjaXR5KTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGdldEhvdXNlRmF2b3VyaXRlcyhjaXR5KSB7XG4gICAgICAgIHZhciBvYmplY3RUeXBlID0gJ2pzb24nLFxuICAgICAgICAgICAgYXBpS2V5ID0gJ2UyZDYwZTg4NWI4NzQyZDRiMDY0ODMwMGUzNzAzYmQ3JyxcbiAgICAgICAgICAgIHR5cGUgPSAna29vcCcsXG4gICAgICAgICAgICBjaXR5ID0gY2l0eSxcbiAgICAgICAgICAgIHBhZ2VOdW1iZXIgPSAnMScsXG4gICAgICAgICAgICBwYWdlU2l6ZSA9ICcyNScsXG4gICAgICAgICAgICBhcGlVUkwgPSAnaHR0cDovL2Z1bmRhLmt5cmFuZGlhLm5sL2ZlZWRzL0FhbmJvZC5zdmMvJyArIG9iamVjdFR5cGUgKyAnLycgKyBhcGlLZXkgKyAnLz90eXBlPScgKyB0eXBlICsgJyZ6bz0vJyArIGNpdHkgKyAnJnBhZ2U9JyArIHBhZ2VOdW1iZXIgKyAnJnBhZ2VzaXplPScgKyBwYWdlU2l6ZSArICcnO1xuXG4gICAgICAgIEFQUC5kYXRhLnJlcXVlc3QoYXBpVVJMKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgdmFyIGhvdXNlRGF0YSA9IEpTT04ucGFyc2UocmVzcG9uc2UpO1xuXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhob3VzZURhdGEpO1xuXG4gICAgICAgICAgICB2YXIgZGF0YSA9IFtdO1xuXG4gICAgICAgICAgICBbXS5mb3JFYWNoLmNhbGwoaG91c2VEYXRhLk9iamVjdHMsIGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICAgICAgICAgICAgICB2YXIgb2JqZWN0cyA9IHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IG9iamVjdC5JZCxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IG9iamVjdC5BZHJlcyxcbiAgICAgICAgICAgICAgICAgICAgcGhvdG86IG9iamVjdC5Gb3RvTGFyZ2VzdCxcbiAgICAgICAgICAgICAgICAgICAgcG9zdGFsY29kZTogb2JqZWN0LlBvc3Rjb2RlLFxuICAgICAgICAgICAgICAgICAgICBwbGFjZTogb2JqZWN0Lldvb25wbGFhdHMsXG4gICAgICAgICAgICAgICAgICAgIHByaWNlOiBvYmplY3QuUHJpanMuS29vcHByaWpzXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBkYXRhLnB1c2gob2JqZWN0cyk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XG5cbiAgICAgICAgICAgIEFQUC5wYWdlLmhvdXNlRmF2b3VyaXRlcyhkYXRhKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGdldEhvdXNlRGV0YWlsKElEKSB7XG4gICAgICAgIHZhciBvYmplY3RUeXBlID0gJ2pzb24nLFxuICAgICAgICAgICAgYXBpS2V5ID0gJ2UyZDYwZTg4NWI4NzQyZDRiMDY0ODMwMGUzNzAzYmQ3JyxcbiAgICAgICAgICAgIElEID0gSUQsXG4gICAgICAgICAgICB0eXBlID0gJ2tvb3AnLFxuICAgICAgICAgICAgYXBpVVJMID0gJ2h0dHA6Ly9mdW5kYS5reXJhbmRpYS5ubC9mZWVkcy9BYW5ib2Quc3ZjLycgKyBvYmplY3RUeXBlICsgJy9kZXRhaWwvJyArIGFwaUtleSArICcvJyArIHR5cGUgKyAnLycgKyBJRCArICcvJztcblxuICAgICAgICBBUFAuZGF0YS5yZXF1ZXN0KGFwaVVSTCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHZhciBob3VzZURhdGEgPSBKU09OLnBhcnNlKHJlc3BvbnNlKTtcblxuICAgICAgICAgICAgY29uc29sZS5sb2coaG91c2VEYXRhKTtcblxuICAgICAgICAgICAgdmFyIGksIG1lZGlhLCBqLCBtZWRpYUl0ZW1zLCBsYXJnZVBob3Rvc1VybDtcbiAgICAgICAgICAgIHZhciBwaG90b3MgPSBbXTtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBob3VzZURhdGEuTWVkaWEubGVuZ3RoIC0gMTI7IGkrKykge1xuICAgICAgICAgICAgICAgIG1lZGlhID0gaG91c2VEYXRhLk1lZGlhW2ldO1xuICAgICAgICAgICAgICAgIGlmIChtZWRpYS5NZWRpYUl0ZW1zWzNdICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBsYXJnZVBob3Rvc1VybCA9IG1lZGlhLk1lZGlhSXRlbXNbM10uVXJsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhsYXJnZVBob3Rvc1VybCk7XG4gICAgICAgICAgICAgICAgcGhvdG9zLnB1c2goeyBwaG90bzogbGFyZ2VQaG90b3NVcmwgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHBob3Rvcyk7XG4gICAgICAgICAgICB2YXIgZGF0YSA9IFtdO1xuXG4gICAgICAgICAgICB2YXIgb2JqZWN0cyA9IHtcbiAgICAgICAgICAgICAgICBpZDogaG91c2VEYXRhLkludGVybmFsSWQsXG4gICAgICAgICAgICAgICAgdGl0bGU6IGhvdXNlRGF0YS5UaXRlbHNbMF0uT21zY2hyaWp2aW5nLFxuICAgICAgICAgICAgICAgIHBob3RvczogcGhvdG9zLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBob3VzZURhdGEuVm9sbGVkaWdlT21zY2hyaWp2aW5nLFxuICAgICAgICAgICAgICAgIHByaWNlOiBob3VzZURhdGEuS29vcFByaWpzLFxuICAgICAgICAgICAgICAgIHVybDogaG91c2VEYXRhLlVSTFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGRhdGEucHVzaChvYmplY3RzKTtcblxuICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XG5cbiAgICAgICAgICAgIEFQUC5wYWdlLmhvdXNlRGV0YWlsKGRhdGEpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gZ2V0SG91c2VWaWRlbyhJRCwgaG91c2VJRHMpIHtcbiAgICAgICAgdmFyIG9iamVjdFR5cGUgPSAnanNvbicsXG4gICAgICAgICAgICBhcGlLZXkgPSAnZTJkNjBlODg1Yjg3NDJkNGIwNjQ4MzAwZTM3MDNiZDcnLFxuICAgICAgICAgICAgSUQgPSBJRCxcbiAgICAgICAgICAgIHR5cGUgPSAna29vcCcsXG4gICAgICAgICAgICBhcGlVUkwgPSAnaHR0cDovL2Z1bmRhLmt5cmFuZGlhLm5sL2ZlZWRzL0FhbmJvZC5zdmMvJyArIG9iamVjdFR5cGUgKyAnL2RldGFpbC8nICsgYXBpS2V5ICsgJy8nICsgdHlwZSArICcvJyArIElEICsgJy8nO1xuXG4gICAgICAgIEFQUC5kYXRhLnJlcXVlc3QoYXBpVVJMKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgdmFyIGhvdXNlRGV0YWlsRGF0YSA9IEpTT04ucGFyc2UocmVzcG9uc2UpO1xuXG4gICAgICAgICAgICAvLyBHZXQgbmV4dCBJRCBpbiBhcnJheVxuICAgICAgICAgICAgdmFyIG5leHRJdGVtID0gZnVuY3Rpb24gbmV4dEl0ZW0oaWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgaSA9IDAsXG4gICAgICAgICAgICAgICAgICAgIG1heCA9IGhvdXNlSURzLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgIGZvciAoaTsgaSA8IG1heDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChob3VzZUlEc1tpXS5pZCA9PT0gSUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBob3VzZUlEc1tpICsgMV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuICdub3QgZm91bmQnO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLy8gR2V0IHByZXYgSUQgaW4gYXJyYXlcbiAgICAgICAgICAgIHZhciBwcmV2SXRlbSA9IGZ1bmN0aW9uIHByZXZJdGVtKGlkKSB7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSAwLFxuICAgICAgICAgICAgICAgICAgICBtYXggPSBob3VzZUlEcy5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGk7IGkgPCBtYXg7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaG91c2VJRHNbaV0uaWQgPT09IElEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaG91c2VJRHNbaSAtIDFdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiAnbm90IGZvdW5kJztcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHZhciBuZXh0SUQgPSBuZXh0SXRlbShJRCk7XG4gICAgICAgICAgICB2YXIgcHJldklEID0gcHJldkl0ZW0oSUQpO1xuXG4gICAgICAgICAgICBpZiAocHJldklEID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICBpZDogSUQsXG4gICAgICAgICAgICAgICAgICAgIG5leHRJRDogbmV4dElELmlkLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogaG91c2VEZXRhaWxEYXRhLlRpdGVsc1swXS5PbXNjaHJpanZpbmcsXG4gICAgICAgICAgICAgICAgICAgIGJ1eVByaWNlOiBob3VzZURldGFpbERhdGEuUHJpanMuS29vcHByaWpzLFxuICAgICAgICAgICAgICAgICAgICB2aWRlb1VSTDogaG91c2VEZXRhaWxEYXRhLlZpZGVvLlZpZGVvc1swXS5DZG5zWzBdLlVybFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG5leHRJRCA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IElELFxuICAgICAgICAgICAgICAgICAgICBwcmV2SUQ6IHByZXZJRC5pZCxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGhvdXNlRGV0YWlsRGF0YS5UaXRlbHNbMF0uT21zY2hyaWp2aW5nLFxuICAgICAgICAgICAgICAgICAgICBidXlQcmljZTogaG91c2VEZXRhaWxEYXRhLlByaWpzLktvb3BwcmlqcyxcbiAgICAgICAgICAgICAgICAgICAgdmlkZW9VUkw6IGhvdXNlRGV0YWlsRGF0YS5WaWRlby5WaWRlb3NbMF0uQ2Ruc1swXS5VcmxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IElELFxuICAgICAgICAgICAgICAgICAgICBuZXh0SUQ6IG5leHRJRC5pZCxcbiAgICAgICAgICAgICAgICAgICAgcHJldklEOiBwcmV2SUQuaWQsXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBob3VzZURldGFpbERhdGEuVGl0ZWxzWzBdLk9tc2NocmlqdmluZyxcbiAgICAgICAgICAgICAgICAgICAgYnV5UHJpY2U6IGhvdXNlRGV0YWlsRGF0YS5Qcmlqcy5Lb29wcHJpanMsXG4gICAgICAgICAgICAgICAgICAgIHZpZGVvVVJMOiBob3VzZURldGFpbERhdGEuVmlkZW8uVmlkZW9zWzBdLkNkbnNbMF0uVXJsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XG4gICAgICAgICAgICBBUFAucGFnZS5ob3VzZVZpZGVvKGRhdGEpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF9kZWZpbmVQcm9wZXJ0eSh7XG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3QsXG4gICAgICAgIGdldEhvdXNlczogZ2V0SG91c2VzLFxuICAgICAgICBnZXRIb3VzZUZhdm91cml0ZXM6IGdldEhvdXNlRmF2b3VyaXRlcyxcbiAgICAgICAgZ2V0SG91c2VWaWRlbzogZ2V0SG91c2VWaWRlbyxcbiAgICAgICAgZ2V0SG91c2VEZXRhaWw6IGdldEhvdXNlRGV0YWlsIH0sICdnZXRIb3VzZURldGFpbCcsIGdldEhvdXNlRGV0YWlsKTtcbn0oKTtcbid1c2Ugc3RyaWN0JztcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXHRHRU8gTE9DQVRJT05cbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbkFQUC5nZW8gPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gZ2V0TG9jYXRpb24oKSB7XG4gICAgICAgIGlmIChuYXZpZ2F0b3IuZ2VvbG9jYXRpb24pIHtcbiAgICAgICAgICAgIG5hdmlnYXRvci5nZW9sb2NhdGlvbi5nZXRDdXJyZW50UG9zaXRpb24oZGlzcGxheVBvc2l0aW9uLCBkaXNwbGF5RXJyb3IsIHtcbiAgICAgICAgICAgICAgICBlbmFibGVIaWdoQWNjdXJhY3k6IHRydWUsXG4gICAgICAgICAgICAgICAgbWF4aW11bUFnZTogMFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkaXNwbGF5UG9zaXRpb24ocG9zaXRpb24pIHtcbiAgICAgICAgdmFyIGdwc1RvQ2l0eSA9IFsnaHR0cHM6Ly9ub21pbmF0aW0ub3BlbnN0cmVldG1hcC5vcmcvcmV2ZXJzZT9mb3JtYXQ9anNvbiZsYXQ9JywgJyZsb249J10sXG4gICAgICAgICAgICBsYXQgPSBwb3NpdGlvbi5jb29yZHMubGF0aXR1ZGUsXG4gICAgICAgICAgICBsb24gPSBwb3NpdGlvbi5jb29yZHMubG9uZ2l0dWRlLFxuICAgICAgICAgICAgem9vbSA9ICcmem9vbT0xMyZhZGRyZXNzZGV0YWlscz0xJyxcbiAgICAgICAgICAgIENpdHlVcmwgPSBncHNUb0NpdHlbMF0gKyBsYXQgKyBncHNUb0NpdHlbMV0gKyBsb24gKyB6b29tO1xuXG4gICAgICAgIEFQUC5kYXRhLnJlcXVlc3QoQ2l0eVVybCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHZhciBjaXR5RGF0YSA9IEpTT04ucGFyc2UocmVzcG9uc2UpO1xuICAgICAgICAgICAgdmFyIGNpdHkgPSBjaXR5RGF0YS5hZGRyZXNzLmNpdHkgfHwgY2l0eURhdGEuYWRkcmVzcy50b3duO1xuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ0xvY2F0aW9uJywgY2l0eSk7XG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGNpdHkpO1xuXG4gICAgICAgICAgICBBUFAuZGF0YS5nZXRIb3VzZXMoY2l0eSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRpc3BsYXlFcnJvcigpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ2FuIGVycm9yIGhhcyBvY2N1cmVkJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgZ2V0TG9jYXRpb246IGdldExvY2F0aW9uLFxuICAgICAgICBkaXNwbGF5UG9zaXRpb246IGRpc3BsYXlQb3NpdGlvblxuICAgIH07XG59KCk7XG4ndXNlIHN0cmljdCc7XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcblx0UEFHRVMgW3dpdGggdGVtcGxhdGluZyBsaWI6IE11c3RhY2hlXVxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuQVBQLnBhZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF9tYWluU2VsZWN0b3IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdtYWluJyk7XG4gICAgdmFyIF9sb2FkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbG9hZGVyJyk7XG5cbiAgICBmdW5jdGlvbiBob3VzZVZpZGVvKGRhdGEpIHtcbiAgICAgICAgQVBQLmRhdGEucmVxdWVzdCgnLi9kaXN0L3RlbXBsYXRlcy9ob3VzZS12aWRlb3MubXN0JykudGhlbihmdW5jdGlvbiAodGVtcGxhdGUpIHtcbiAgICAgICAgICAgIF9tYWluU2VsZWN0b3IuaW5uZXJIVE1MID0gTXVzdGFjaGUucmVuZGVyKHRlbXBsYXRlLCBkYXRhKTtcbiAgICAgICAgICAgIF9sb2FkZXIuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XG5cbiAgICAgICAgICAgIEFQUC5zdG9yYWdlLmluaXQoKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGhvdXNlRGV0YWlsKGRhdGEpIHtcbiAgICAgICAgQVBQLmRhdGEucmVxdWVzdCgnLi9kaXN0L3RlbXBsYXRlcy9ob3VzZS1kZXRhaWwubXN0JykudGhlbihmdW5jdGlvbiAodGVtcGxhdGUpIHtcbiAgICAgICAgICAgIF9tYWluU2VsZWN0b3IuaW5uZXJIVE1MID0gTXVzdGFjaGUucmVuZGVyKHRlbXBsYXRlLCBkYXRhKTtcbiAgICAgICAgICAgIF9sb2FkZXIuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBob3VzZUZhdm91cml0ZXMoZGF0YSkge1xuXG4gICAgICAgIGlmIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImhvdXNlSURcIikgIT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIElEcyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdob3VzZUlEJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgSURzID0gW107XG4gICAgICAgIH1cblxuICAgICAgICAvKiBGaWx0ZXIgSUQgKi9cbiAgICAgICAgdmFyIGRhdGEgPSBkYXRhLmZpbHRlcihmdW5jdGlvbiAoYykge1xuICAgICAgICAgICAgcmV0dXJuIElEcy5pbmRleE9mKGMuaWQpICE9IC0xO1xuICAgICAgICB9KTtcblxuICAgICAgICBjb25zb2xlLmxvZyhkYXRhKTtcblxuICAgICAgICBBUFAuZGF0YS5yZXF1ZXN0KCcuL2Rpc3QvdGVtcGxhdGVzL2hvdXNlLWZhdm91cml0ZXMubXN0JykudGhlbihmdW5jdGlvbiAodGVtcGxhdGUpIHtcbiAgICAgICAgICAgIF9tYWluU2VsZWN0b3IuaW5uZXJIVE1MID0gTXVzdGFjaGUucmVuZGVyKHRlbXBsYXRlLCBkYXRhKTtcbiAgICAgICAgICAgIF9sb2FkZXIuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XG5cbiAgICAgICAgICAgIEFQUC5zdG9yYWdlLmluaXQoKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGhvdXNlVmlkZW86IGhvdXNlVmlkZW8sXG4gICAgICAgIGhvdXNlRGV0YWlsOiBob3VzZURldGFpbCxcbiAgICAgICAgaG91c2VGYXZvdXJpdGVzOiBob3VzZUZhdm91cml0ZXNcbiAgICB9O1xufSgpO1xuJ3VzZSBzdHJpY3QnO1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cdFJPVVRFUiBNT0RVTEUgW3dpdGggcm91dGVyIGxpYjogUm91dGllXVxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuQVBQLnJvdXRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBpbml0KGhvdXNlSURzLCBjaXR5KSB7XG4gICAgICAgIGlmICghd2luZG93LmxvY2F0aW9uLmhhc2gpIHtcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbiA9ICcjdmlkZW9JRD0nICsgaG91c2VJRHNbMF0uaWQ7XG4gICAgICAgIH1cbiAgICAgICAgcm91dGllKHtcbiAgICAgICAgICAgICd2aWRlb0lEPTpJRCc6IGZ1bmN0aW9uIHZpZGVvSURJRChJRCkge1xuICAgICAgICAgICAgICAgIEFQUC5kYXRhLmdldEhvdXNlVmlkZW8oSUQsIGhvdXNlSURzKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAnaG91c2VEZXRhaWw9OklEJzogZnVuY3Rpb24gaG91c2VEZXRhaWxJRChJRCkge1xuICAgICAgICAgICAgICAgIEFQUC5kYXRhLmdldEhvdXNlRGV0YWlsKElEKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAnZmF2b3VyaXRlcyc6IGZ1bmN0aW9uIGZhdm91cml0ZXMoKSB7XG4gICAgICAgICAgICAgICAgQVBQLmRhdGEuZ2V0SG91c2VGYXZvdXJpdGVzKGNpdHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgaW5pdDogaW5pdFxuICAgIH07XG59KCk7XG5cInVzZSBzdHJpY3RcIjtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbkFQUC5zdG9yYWdlID0gZnVuY3Rpb24gKCkge1xuXHRmdW5jdGlvbiBpbml0KCkge1xuXHRcdC8vIHNyYzogaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zMDAwODExNC9ob3ctZG8taS1wcm9taXNpZnktbmF0aXZlLXhoclxuXHRcdC8qIExvY2FsIFN0b3JhZ2UgYXJyYXkgICovXG5cdFx0aWYgKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiaG91c2VJRFwiKSA9PT0gbnVsbCB8fCBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImhvdXNlSURcIikgPT09IFwiXCIpIHtcblx0XHRcdHZhciBhcnJheUlEID0gW107XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBhcnJheUlEID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnaG91c2VJRCcpKTtcblx0XHR9XG5cblx0XHQvLyBDcmVhdGUgYSBuZXcgdmFyaWFibGUgbmV3QXJyYXlJRCBmb3IgZHluYW1pYyBhZGRpbmcgZmF2b3VyaXRlcy5cblx0XHR2YXIgbmV3QXJyYXlJRCA9IGFycmF5SUQ7XG5cblx0XHQvLyBGaW5kIGJ1dHRvblxuXHRcdHZhciBfZmF2b3VyaXRlQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmZhdm91cml0ZS1idG4nKTtcblxuXHRcdC8vIENoZWNrIGlmIElEIGlzIHN0b3JlZCBpbiBhcnJheSBhbmQgbWFrZSBidXR0b24gYWN0aXZlXG5cdFx0W10uZm9yRWFjaC5jYWxsKG5ld0FycmF5SUQsIGZ1bmN0aW9uIChJRCkge1xuXHRcdFx0dmFyIF9mYXZvdXJpdGVCdXR0b25JRCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mYXZvdXJpdGUtYnRuW3ZhbHVlPVwiJyArIElEICsgJ1wiXScpO1xuXHRcdFx0aWYgKF9mYXZvdXJpdGVCdXR0b25JRCkge1xuXHRcdFx0XHRfZmF2b3VyaXRlQnV0dG9uSUQuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHQvLyBGYXZvdXJpdGUgYnV0dG9uIGV2ZW50bGlzdGVuZXJcblx0XHRbXS5mb3JFYWNoLmNhbGwoX2Zhdm91cml0ZUJ1dHRvbiwgZnVuY3Rpb24gKGJ1dHRvbikge1xuXHRcdFx0Ly92YXIgYnV0dG9uSUQgPSBidXR0b24uZ2V0QXR0cmlidXRlKCdkYXRhLWlkJyk7XG5cdFx0XHRidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzdG9yZUlELCBmYWxzZSk7XG5cdFx0fSk7XG5cblx0XHRmdW5jdGlvbiBzdG9yZUlEKGV2ZW50KSB7XG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0dmFyIGNsaWNrZWRJRCA9IHRoaXMuZ2V0QXR0cmlidXRlKCd2YWx1ZScpO1xuXHRcdFx0YXJyYXlJRC5wdXNoKGNsaWNrZWRJRCk7XG5cblx0XHRcdC8vIFJlbW92ZSBjbGFzc1xuXHRcdFx0dGhpcy5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcblxuXHRcdFx0LyogIENIRUNLIEZPUiBEVVBMSUNBVEVEIElEJ3MgLSBzcmM6IGh0dHBzOi8vanNmaWRkbGUubmV0L0J1bWJsZUIybmEvWHZnVGIvMS8gKi9cblx0XHRcdGZvciAodmFyIGggPSAwOyBoIDwgbmV3QXJyYXlJRC5sZW5ndGg7IGgrKykge1xuXHRcdFx0XHR2YXIgY3VySXRlbSA9IG5ld0FycmF5SURbaF0sXG5cdFx0XHRcdCAgICBmb3VuZENvdW50ID0gMDtcblx0XHRcdFx0Ly8gc2VhcmNoIGFycmF5IGZvciBpdGVtXG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbmV3QXJyYXlJRC5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdGlmIChuZXdBcnJheUlEW2ldID09IGFycmF5SURbaF0pIGZvdW5kQ291bnQrKztcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoZm91bmRDb3VudCA+IDEpIHtcblx0XHRcdFx0XHQvLyByZW1vdmUgcmVwZWF0ZWQgaXRlbSBmcm9tIG5ldyBhcnJheVxuXHRcdFx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgbmV3QXJyYXlJRC5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRcdFx0aWYgKG5ld0FycmF5SURbal0gPT0gY3VySXRlbSkge1xuXHRcdFx0XHRcdFx0XHRuZXdBcnJheUlELnNwbGljZShqLCAxKTtcblx0XHRcdFx0XHRcdFx0aiA9IGogLSAxO1xuXHRcdFx0XHRcdFx0XHQvL3RoaXMuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XG5cdFx0XHRcdFx0XHRcdC8vdGhpcy5pbm5lckhUTUwgPSAnQWRkIHRvIGZhdm91cml0ZXMnO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdFx0Ly8gQ2hlY2sgaWYgSUQgaXMgc3RvcmVkIGluIGFycmF5IGFuZCBtYWtlIGJ1dHRvbiBhY3RpdmVcblx0XHRcdFtdLmZvckVhY2guY2FsbChuZXdBcnJheUlELCBmdW5jdGlvbiAoSUQpIHtcblx0XHRcdFx0dmFyIF9mYXZvdXJpdGVCdXR0b25JRCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mYXZvdXJpdGUtYnRuW3ZhbHVlPVwiJyArIElEICsgJ1wiXScpO1xuXHRcdFx0XHRpZiAoX2Zhdm91cml0ZUJ1dHRvbklEKSB7XG5cdFx0XHRcdFx0X2Zhdm91cml0ZUJ1dHRvbklELmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0YWRkU3RvcmFnZSgnaG91c2VJRCcsIG5ld0FycmF5SUQpO1xuXHRcdH07XG5cblx0XHRmdW5jdGlvbiBhZGRTdG9yYWdlKGtleSwgdmFsdWUpIHtcblx0XHRcdC8vIHNyYzogaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vRmx1aWRieXRlLzQ3MTgzODBcblx0XHRcdHZhciBsc1N1cHBvcnQ7XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdGxvY2FsU3RvcmFnZS50ZXN0ID0gMTtcblx0XHRcdFx0bHNTdXBwb3J0ID0gdHJ1ZTtcblx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0bHNTdXBwb3J0ID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHZhbHVlIGlzIGRldGVjdGVkLCBzZXQgbmV3IG9yIG1vZGlmeSBzdG9yZVxuXHRcdFx0aWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiB2YWx1ZSAhPT0gbnVsbCkge1xuXHRcdFx0XHQvLyBDb252ZXJ0IG9iamVjdCB2YWx1ZXMgdG8gSlNPTlxuXHRcdFx0XHRpZiAoKHR5cGVvZiB2YWx1ZSA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKHZhbHVlKSkgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly8gU2V0IHRoZSBzdG9yZVxuXHRcdFx0XHRpZiAobHNTdXBwb3J0KSB7XG5cdFx0XHRcdFx0Ly8gTmF0aXZlIHN1cHBvcnRcblx0XHRcdFx0XHRsb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIHZhbHVlKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQvLyBVc2UgQ29va2llXG5cdFx0XHRcdFx0Y3JlYXRlQ29va2llKGtleSwgdmFsdWUsIDMwKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBObyB2YWx1ZSBzdXBwbGllZCwgcmV0dXJuIHZhbHVlXG5cdFx0XHRpZiAodHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHRcdC8vIEdldCB2YWx1ZVxuXHRcdFx0XHRpZiAobHNTdXBwb3J0KSB7XG5cdFx0XHRcdFx0Ly8gTmF0aXZlIHN1cHBvcnRcblx0XHRcdFx0XHRkYXRhID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQvLyBVc2UgY29va2llXG5cdFx0XHRcdFx0ZGF0YSA9IHJlYWRDb29raWUoa2V5KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFRyeSB0byBwYXJzZSBKU09OLi4uXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0ZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG5cdFx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0XHRkYXRhID0gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBOdWxsIHNwZWNpZmllZCwgcmVtb3ZlIHN0b3JlXG5cdFx0XHRpZiAodmFsdWUgPT09IG51bGwpIHtcblx0XHRcdFx0aWYgKGxzU3VwcG9ydCkge1xuXHRcdFx0XHRcdC8vIE5hdGl2ZSBzdXBwb3J0XG5cdFx0XHRcdFx0bG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oa2V5KTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQvLyBVc2UgY29va2llXG5cdFx0XHRcdFx0Y3JlYXRlQ29va2llKGtleSwgJycsIC0xKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvKipcbiAgICAqIENyZWF0ZXMgbmV3IGNvb2tpZSBvciByZW1vdmVzIGNvb2tpZSB3aXRoIG5lZ2F0aXZlIGV4cGlyYXRpb25cbiAgICAqIEBwYXJhbSAga2V5ICAgICAgIFRoZSBrZXkgb3IgaWRlbnRpZmllciBmb3IgdGhlIHN0b3JlXG4gICAgKiBAcGFyYW0gIHZhbHVlICAgICBDb250ZW50cyBvZiB0aGUgc3RvcmVcbiAgICAqIEBwYXJhbSAgZXhwICAgICAgIEV4cGlyYXRpb24gLSBjcmVhdGlvbiBkZWZhdWx0cyB0byAzMCBkYXlzXG4gICAgKi9cblx0XHRcdGZ1bmN0aW9uIGNyZWF0ZUNvb2tpZShrZXksIHZhbHVlLCBleHApIHtcblx0XHRcdFx0dmFyIGRhdGUgPSBuZXcgRGF0ZSgpO1xuXHRcdFx0XHRkYXRlLnNldFRpbWUoZGF0ZS5nZXRUaW1lKCkgKyBleHAgKiAyNCAqIDYwICogNjAgKiAxMDAwKTtcblx0XHRcdFx0dmFyIGV4cGlyZXMgPSBcIjsgZXhwaXJlcz1cIiArIGRhdGUudG9HTVRTdHJpbmcoKTtcblx0XHRcdFx0ZG9jdW1lbnQuY29va2llID0ga2V5ICsgXCI9XCIgKyB2YWx1ZSArIGV4cGlyZXMgKyBcIjsgcGF0aD0vXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8qKlxuICAgICogUmV0dXJucyBjb250ZW50cyBvZiBjb29raWVcbiAgICAqIEBwYXJhbSAga2V5ICAgICAgIFRoZSBrZXkgb3IgaWRlbnRpZmllciBmb3IgdGhlIHN0b3JlXG4gICAgKi9cblx0XHRcdGZ1bmN0aW9uIHJlYWRDb29raWUoa2V5KSB7XG5cdFx0XHRcdHZhciBuYW1lRVEgPSBrZXkgKyBcIj1cIjtcblx0XHRcdFx0dmFyIGNhID0gZG9jdW1lbnQuY29va2llLnNwbGl0KCc7Jyk7XG5cdFx0XHRcdGZvciAodmFyIGkgPSAwLCBtYXggPSBjYS5sZW5ndGg7IGkgPCBtYXg7IGkrKykge1xuXHRcdFx0XHRcdHZhciBjID0gY2FbaV07XG5cdFx0XHRcdFx0d2hpbGUgKGMuY2hhckF0KDApID09PSAnICcpIHtcblx0XHRcdFx0XHRcdGMgPSBjLnN1YnN0cmluZygxLCBjLmxlbmd0aCk7XG5cdFx0XHRcdFx0fWlmIChjLmluZGV4T2YobmFtZUVRKSA9PT0gMCkgcmV0dXJuIGMuc3Vic3RyaW5nKG5hbWVFUS5sZW5ndGgsIGMubGVuZ3RoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblx0XHR9O1xuXHR9O1xuXG5cdHJldHVybiB7XG5cdFx0aW5pdDogaW5pdFxuXHR9O1xufSgpOyIsIlxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXHROQU1FU1BBQ0VcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbnZhciBBUFAgPSBBUFAgfHwge307XG4ndXNlIHN0cmljdCc7XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICBMQVVOQ0ggQVBQXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5BUFAubGF1bmNoZXIgPSAoZnVuY3Rpb24gKCkge1xuXG4gICAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgQVBQLmdlby5nZXRMb2NhdGlvbigpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgaW5pdDogaW5pdFxuICAgIH07XG5cbn0oKSk7XG5cbkFQUC5sYXVuY2hlci5pbml0KCk7XG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cdERBVEEgUkVRVUVTVFxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuQVBQLmRhdGEgPSAoZnVuY3Rpb24gKGNpdHkpIHtcbiAgICBmdW5jdGlvbiByZXF1ZXN0KHVybCkgeyAvLyBzcmM6IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzAwMDgxMTQvaG93LWRvLWktcHJvbWlzaWZ5LW5hdGl2ZS14aHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgICAgIHhoci5vcGVuKCdHRVQnLCB1cmwsIHRydWUpO1xuICAgICAgICAgICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zdGF0dXMgPj0gMjAwICYmIHRoaXMuc3RhdHVzIDwgMzAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoeGhyLnJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZWplY3Qoe1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiB0aGlzLnN0YXR1cyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1c1RleHQ6IHhoci5zdGF0dXNUZXh0XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB4aHIub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZWplY3Qoe1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IHRoaXMuc3RhdHVzLFxuICAgICAgICAgICAgICAgICAgICBzdGF0dXNUZXh0OiB4aHIuc3RhdHVzVGV4dFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHhoci5zZW5kKCk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBnZXRIb3VzZXMoY2l0eSkge1xuICAgICAgICB2YXIgb2JqZWN0VHlwZSA9ICdqc29uJyxcbiAgICAgICAgICAgIGFwaUtleSA9ICdlMmQ2MGU4ODViODc0MmQ0YjA2NDgzMDBlMzcwM2JkNycsXG4gICAgICAgICAgICB0eXBlID0gJ2tvb3AnLFxuICAgICAgICAgICAgY2l0eSA9IGNpdHksXG4gICAgICAgICAgICBwYWdlTnVtYmVyID0gJzEnLFxuICAgICAgICAgICAgcGFnZVNpemUgPSAnMjUnLFxuICAgICAgICAgICAgYXBpVVJMID0gJ2h0dHA6Ly9mdW5kYS5reXJhbmRpYS5ubC9mZWVkcy9BYW5ib2Quc3ZjLycrIG9iamVjdFR5cGUgKyAnLycrIGFwaUtleSArICcvP3R5cGU9JyArIHR5cGUgKyAnJnpvPS8nICsgY2l0eSArICcmcGFnZT0nICsgcGFnZU51bWJlciArICcmcGFnZXNpemU9JyArIHBhZ2VTaXplICsgJyc7XG5cbiAgICAgICAgQVBQLmRhdGEucmVxdWVzdChhcGlVUkwpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgaG91c2VEYXRhID0gSlNPTi5wYXJzZShyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgdmFyIGhvdXNlSURzID0gW107XG5cbiAgICAgICAgICAgICAgICBbXS5mb3JFYWNoLmNhbGwoaG91c2VEYXRhLk9iamVjdHMsIGZ1bmN0aW9uIChob3VzZSkge1xuICAgICAgICAgICAgICAgICAgICBpZihob3VzZS5IZWVmdFZpZGVvID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBJRHMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGhvdXNlLklkXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgaG91c2VJRHMucHVzaChJRHMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhob3VzZUlEcyk7XG4gICAgICAgICAgICAgICAgQVBQLnJvdXRlci5pbml0KGhvdXNlSURzLCBjaXR5KTtcbiAgICAgICAgICAgIH0pXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGdldEhvdXNlRmF2b3VyaXRlcyhjaXR5KSB7XG4gICAgICAgIHZhciBvYmplY3RUeXBlID0gJ2pzb24nLFxuICAgICAgICAgICAgYXBpS2V5ID0gJ2UyZDYwZTg4NWI4NzQyZDRiMDY0ODMwMGUzNzAzYmQ3JyxcbiAgICAgICAgICAgIHR5cGUgPSAna29vcCcsXG4gICAgICAgICAgICBjaXR5ID0gY2l0eSxcbiAgICAgICAgICAgIHBhZ2VOdW1iZXIgPSAnMScsXG4gICAgICAgICAgICBwYWdlU2l6ZSA9ICcyNScsXG4gICAgICAgICAgICBhcGlVUkwgPSAnaHR0cDovL2Z1bmRhLmt5cmFuZGlhLm5sL2ZlZWRzL0FhbmJvZC5zdmMvJysgb2JqZWN0VHlwZSArICcvJysgYXBpS2V5ICsgJy8/dHlwZT0nICsgdHlwZSArICcmem89LycgKyBjaXR5ICsgJyZwYWdlPScgKyBwYWdlTnVtYmVyICsgJyZwYWdlc2l6ZT0nICsgcGFnZVNpemUgKyAnJztcblxuICAgICAgICBBUFAuZGF0YS5yZXF1ZXN0KGFwaVVSTClcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIHZhciBob3VzZURhdGEgPSBKU09OLnBhcnNlKHJlc3BvbnNlKTtcblxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGhvdXNlRGF0YSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IFtdO1xuXG4gICAgICAgICAgICAgICAgW10uZm9yRWFjaC5jYWxsKGhvdXNlRGF0YS5PYmplY3RzLCBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvYmplY3RzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IG9iamVjdC5JZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBvYmplY3QuQWRyZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBwaG90bzogb2JqZWN0LkZvdG9MYXJnZXN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zdGFsY29kZTogb2JqZWN0LlBvc3Rjb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2U6IG9iamVjdC5Xb29ucGxhYXRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJpY2U6IG9iamVjdC5Qcmlqcy5Lb29wcHJpanNcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5wdXNoKG9iamVjdHMpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XG5cbiAgICAgICAgICAgICAgICBBUFAucGFnZS5ob3VzZUZhdm91cml0ZXMoZGF0YSk7XG4gICAgICAgICAgICB9KVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBnZXRIb3VzZURldGFpbChJRCkge1xuICAgICAgICB2YXIgb2JqZWN0VHlwZSA9ICdqc29uJyxcbiAgICAgICAgICAgIGFwaUtleSA9ICdlMmQ2MGU4ODViODc0MmQ0YjA2NDgzMDBlMzcwM2JkNycsXG4gICAgICAgICAgICBJRCA9IElELFxuICAgICAgICAgICAgdHlwZSA9ICdrb29wJyxcbiAgICAgICAgICAgIGFwaVVSTCA9ICdodHRwOi8vZnVuZGEua3lyYW5kaWEubmwvZmVlZHMvQWFuYm9kLnN2Yy8nICsgb2JqZWN0VHlwZSArICcvZGV0YWlsLycgKyBhcGlLZXkgKyAnLycgKyB0eXBlICsgJy8nICsgSUQgKyAnLyc7XG5cblxuICAgICAgICBBUFAuZGF0YS5yZXF1ZXN0KGFwaVVSTClcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIHZhciBob3VzZURhdGEgPSBKU09OLnBhcnNlKHJlc3BvbnNlKTtcblxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGhvdXNlRGF0YSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgaSwgbWVkaWEsIGosIG1lZGlhSXRlbXMsIGxhcmdlUGhvdG9zVXJsO1xuICAgICAgICAgICAgICAgIHZhciBwaG90b3MgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaG91c2VEYXRhLk1lZGlhLmxlbmd0aC0xMjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICBtZWRpYSA9IGhvdXNlRGF0YS5NZWRpYVtpXTtcbiAgICAgICAgICAgICAgICAgIGlmKG1lZGlhLk1lZGlhSXRlbXNbM10gIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgbGFyZ2VQaG90b3NVcmwgPSBtZWRpYS5NZWRpYUl0ZW1zWzNdLlVybDtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGxhcmdlUGhvdG9zVXJsKTtcbiAgICAgICAgICAgICAgICAgIHBob3Rvcy5wdXNoKHtwaG90bzogbGFyZ2VQaG90b3NVcmx9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhwaG90b3MpO1xuICAgICAgICAgICAgICAgIHZhciBkYXRhID0gW107XG5cbiAgICAgICAgICAgICAgICB2YXIgb2JqZWN0cyA9IHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGhvdXNlRGF0YS5JbnRlcm5hbElkLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogaG91c2VEYXRhLlRpdGVsc1swXS5PbXNjaHJpanZpbmcsXG4gICAgICAgICAgICAgICAgICAgIHBob3RvczogcGhvdG9zLFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogaG91c2VEYXRhLlZvbGxlZGlnZU9tc2NocmlqdmluZyxcbiAgICAgICAgICAgICAgICAgICAgcHJpY2U6IGhvdXNlRGF0YS5Lb29wUHJpanMsXG4gICAgICAgICAgICAgICAgICAgIHVybDogaG91c2VEYXRhLlVSTFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgZGF0YS5wdXNoKG9iamVjdHMpO1xuXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XG5cbiAgICAgICAgICAgICAgICBBUFAucGFnZS5ob3VzZURldGFpbChkYXRhKTtcbiAgICAgICAgICAgIH0pXG5cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gZ2V0SG91c2VWaWRlbyhJRCwgaG91c2VJRHMpIHtcbiAgICAgICAgdmFyIG9iamVjdFR5cGUgPSAnanNvbicsXG4gICAgICAgICAgICBhcGlLZXkgPSAnZTJkNjBlODg1Yjg3NDJkNGIwNjQ4MzAwZTM3MDNiZDcnLFxuICAgICAgICAgICAgSUQgPSBJRCxcbiAgICAgICAgICAgIHR5cGUgPSAna29vcCcsXG4gICAgICAgICAgICBhcGlVUkwgPSAnaHR0cDovL2Z1bmRhLmt5cmFuZGlhLm5sL2ZlZWRzL0FhbmJvZC5zdmMvJyArIG9iamVjdFR5cGUgKyAnL2RldGFpbC8nICsgYXBpS2V5ICsgJy8nICsgdHlwZSArICcvJyArIElEICsgJy8nO1xuXG5cbiAgICAgICAgQVBQLmRhdGEucmVxdWVzdChhcGlVUkwpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgaG91c2VEZXRhaWxEYXRhID0gSlNPTi5wYXJzZShyZXNwb25zZSk7XG5cbiAgICAgICAgICAgICAgICAvLyBHZXQgbmV4dCBJRCBpbiBhcnJheVxuICAgICAgICAgICAgICAgIHZhciBuZXh0SXRlbSA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IDAsXG4gICAgICAgICAgICAgICAgICAgIG1heCA9IGhvdXNlSURzLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKGk7IGkgPCBtYXg7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhvdXNlSURzW2ldLmlkID09PSBJRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBob3VzZUlEc1tpICsgMV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdub3QgZm91bmQnO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAvLyBHZXQgcHJldiBJRCBpbiBhcnJheVxuICAgICAgICAgICAgICAgIHZhciBwcmV2SXRlbSA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IDAsXG4gICAgICAgICAgICAgICAgICAgIG1heCA9IGhvdXNlSURzLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgICAgICBmb3IoaTsgaSA8IG1heDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaG91c2VJRHNbaV0uaWQgPT09IElEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhvdXNlSURzW2kgLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ25vdCBmb3VuZCc7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHZhciBuZXh0SUQgPSBuZXh0SXRlbShJRCk7XG4gICAgICAgICAgICAgICAgdmFyIHByZXZJRCA9IHByZXZJdGVtKElEKTtcblxuICAgICAgICAgICAgICAgIGlmKHByZXZJRCA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogSUQsXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0SUQ6IG5leHRJRC5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBob3VzZURldGFpbERhdGEuVGl0ZWxzWzBdLk9tc2NocmlqdmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1eVByaWNlOiBob3VzZURldGFpbERhdGEuUHJpanMuS29vcHByaWpzLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmlkZW9VUkw6IGhvdXNlRGV0YWlsRGF0YS5WaWRlby5WaWRlb3NbMF0uQ2Ruc1swXS5VcmxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYobmV4dElEID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBJRCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZJRDogcHJldklELmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGhvdXNlRGV0YWlsRGF0YS5UaXRlbHNbMF0uT21zY2hyaWp2aW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgYnV5UHJpY2U6IGhvdXNlRGV0YWlsRGF0YS5Qcmlqcy5Lb29wcHJpanMsXG4gICAgICAgICAgICAgICAgICAgICAgICB2aWRlb1VSTDogaG91c2VEZXRhaWxEYXRhLlZpZGVvLlZpZGVvc1swXS5DZG5zWzBdLlVybFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IElELFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dElEOiBuZXh0SUQuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2SUQ6IHByZXZJRC5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBob3VzZURldGFpbERhdGEuVGl0ZWxzWzBdLk9tc2NocmlqdmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1eVByaWNlOiBob3VzZURldGFpbERhdGEuUHJpanMuS29vcHByaWpzLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmlkZW9VUkw6IGhvdXNlRGV0YWlsRGF0YS5WaWRlby5WaWRlb3NbMF0uQ2Ruc1swXS5VcmxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhKTtcbiAgICAgICAgICAgICAgICBBUFAucGFnZS5ob3VzZVZpZGVvKGRhdGEpO1xuICAgICAgICAgICAgfSlcbiAgICB9O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdCxcbiAgICAgICAgZ2V0SG91c2VzOiBnZXRIb3VzZXMsXG4gICAgICAgIGdldEhvdXNlRmF2b3VyaXRlczogZ2V0SG91c2VGYXZvdXJpdGVzLFxuICAgICAgICBnZXRIb3VzZVZpZGVvOiBnZXRIb3VzZVZpZGVvLFxuICAgICAgICBnZXRIb3VzZURldGFpbCwgZ2V0SG91c2VEZXRhaWxcbiAgICB9O1xuXG59KSgpO1xuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXHRHRU8gTE9DQVRJT05cbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbkFQUC5nZW8gPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGdldExvY2F0aW9uKCkge1xuICAgICAgICBpZiAobmF2aWdhdG9yLmdlb2xvY2F0aW9uKSB7XG4gICAgICAgICAgICBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24uZ2V0Q3VycmVudFBvc2l0aW9uKFxuICAgICAgICAgICAgICAgIGRpc3BsYXlQb3NpdGlvbixcbiAgICAgICAgICAgICAgICBkaXNwbGF5RXJyb3IsIHtcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlSGlnaEFjY3VyYWN5OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBtYXhpbXVtQWdlOiAwXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRpc3BsYXlQb3NpdGlvbihwb3NpdGlvbikge1xuICAgICAgICB2YXIgZ3BzVG9DaXR5ID0gWydodHRwczovL25vbWluYXRpbS5vcGVuc3RyZWV0bWFwLm9yZy9yZXZlcnNlP2Zvcm1hdD1qc29uJmxhdD0nLCAnJmxvbj0nXSxcbiAgICAgICAgICAgIGxhdCA9IHBvc2l0aW9uLmNvb3Jkcy5sYXRpdHVkZSxcbiAgICAgICAgICAgIGxvbiA9IHBvc2l0aW9uLmNvb3Jkcy5sb25naXR1ZGUsXG4gICAgICAgICAgICB6b29tID0gJyZ6b29tPTEzJmFkZHJlc3NkZXRhaWxzPTEnLFxuICAgICAgICAgICAgQ2l0eVVybCA9IGdwc1RvQ2l0eVswXSArIGxhdCArIGdwc1RvQ2l0eVsxXSArIGxvbiArIHpvb207XG5cbiAgICAgICAgQVBQLmRhdGEucmVxdWVzdChDaXR5VXJsKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNpdHlEYXRhID0gSlNPTi5wYXJzZShyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgdmFyIGNpdHkgPSBjaXR5RGF0YS5hZGRyZXNzLmNpdHkgfHwgY2l0eURhdGEuYWRkcmVzcy50b3duO1xuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdMb2NhdGlvbicsIGNpdHkpXG5cbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhjaXR5KTtcblxuICAgICAgICAgICAgICAgIEFQUC5kYXRhLmdldEhvdXNlcyhjaXR5KTtcbiAgICAgICAgICAgIH0pXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGlzcGxheUVycm9yKCkge1xuICAgICAgICBjb25zb2xlLmxvZygnYW4gZXJyb3IgaGFzIG9jY3VyZWQnKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBnZXRMb2NhdGlvbjogZ2V0TG9jYXRpb24sXG4gICAgICAgIGRpc3BsYXlQb3NpdGlvbjogZGlzcGxheVBvc2l0aW9uXG4gICAgfTtcblxufSkoKTtcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcblx0UEFHRVMgW3dpdGggdGVtcGxhdGluZyBsaWI6IE11c3RhY2hlXVxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuQVBQLnBhZ2UgPSAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBfbWFpblNlbGVjdG9yID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbWFpbicpO1xuICAgIHZhciBfbG9hZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xvYWRlcicpO1xuXG4gICAgZnVuY3Rpb24gaG91c2VWaWRlbyhkYXRhKSB7XG4gICAgICAgIEFQUC5kYXRhLnJlcXVlc3QoJy4vZGlzdC90ZW1wbGF0ZXMvaG91c2UtdmlkZW9zLm1zdCcpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodGVtcGxhdGUpIHtcbiAgICAgICAgICAgICAgICBfbWFpblNlbGVjdG9yLmlubmVySFRNTCA9IE11c3RhY2hlLnJlbmRlcih0ZW1wbGF0ZSwgZGF0YSk7XG4gICAgICAgICAgICAgICAgX2xvYWRlci5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcblxuICAgICAgICAgICAgICAgIEFQUC5zdG9yYWdlLmluaXQoKTtcbiAgICAgICAgICAgIH0pXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGhvdXNlRGV0YWlsKGRhdGEpIHtcbiAgICAgICAgQVBQLmRhdGEucmVxdWVzdCgnLi9kaXN0L3RlbXBsYXRlcy9ob3VzZS1kZXRhaWwubXN0JylcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh0ZW1wbGF0ZSkge1xuICAgICAgICAgICAgICAgIF9tYWluU2VsZWN0b3IuaW5uZXJIVE1MID0gTXVzdGFjaGUucmVuZGVyKHRlbXBsYXRlLCBkYXRhKTtcbiAgICAgICAgICAgICAgICBfbG9hZGVyLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgfSlcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gaG91c2VGYXZvdXJpdGVzKGRhdGEpIHtcblxuICAgICAgICBpZiAobG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJob3VzZUlEXCIpICE9IG51bGwpIHtcbiAgICAgICAgICAgIHZhciBJRHMgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnaG91c2VJRCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIElEcyA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgLyogRmlsdGVyIElEICovXG4gICAgICAgIHZhciBkYXRhID0gZGF0YS5maWx0ZXIoZnVuY3Rpb24oYykge1xuICAgICAgICAgICAgcmV0dXJuIElEcy5pbmRleE9mKGMuaWQpICE9IC0xXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuXG5cbiAgICAgICAgQVBQLmRhdGEucmVxdWVzdCgnLi9kaXN0L3RlbXBsYXRlcy9ob3VzZS1mYXZvdXJpdGVzLm1zdCcpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodGVtcGxhdGUpIHtcbiAgICAgICAgICAgICAgICBfbWFpblNlbGVjdG9yLmlubmVySFRNTCA9IE11c3RhY2hlLnJlbmRlcih0ZW1wbGF0ZSwgZGF0YSk7XG4gICAgICAgICAgICAgICAgX2xvYWRlci5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcblxuICAgICAgICAgICAgICAgIEFQUC5zdG9yYWdlLmluaXQoKTtcbiAgICAgICAgICAgIH0pXG4gICAgfTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGhvdXNlVmlkZW86IGhvdXNlVmlkZW8sXG4gICAgICAgIGhvdXNlRGV0YWlsOiBob3VzZURldGFpbCxcbiAgICAgICAgaG91c2VGYXZvdXJpdGVzOiBob3VzZUZhdm91cml0ZXNcbiAgICB9O1xuXG59KSgpO1xuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXHRST1VURVIgTU9EVUxFIFt3aXRoIHJvdXRlciBsaWI6IFJvdXRpZV1cbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbkFQUC5yb3V0ZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGluaXQgKGhvdXNlSURzLCBjaXR5KSB7XG4gICAgICAgIGlmICghd2luZG93LmxvY2F0aW9uLmhhc2gpIHtcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbiA9ICcjdmlkZW9JRD0nICsgaG91c2VJRHNbMF0uaWQ7XG4gICAgICAgIH1cbiAgICAgICAgcm91dGllKHtcbiAgICAgICAgICAgICd2aWRlb0lEPTpJRCc6IGZ1bmN0aW9uKElEKSB7XG4gICAgICAgICAgICAgICAgQVBQLmRhdGEuZ2V0SG91c2VWaWRlbyhJRCwgaG91c2VJRHMpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdob3VzZURldGFpbD06SUQnOiBmdW5jdGlvbihJRCkge1xuICAgICAgICAgICAgICAgIEFQUC5kYXRhLmdldEhvdXNlRGV0YWlsKElEKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAnZmF2b3VyaXRlcyc6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIEFQUC5kYXRhLmdldEhvdXNlRmF2b3VyaXRlcyhjaXR5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGluaXQ6IGluaXRcbiAgICB9O1xuXG59KSgpO1xuIiwiQVBQLnN0b3JhZ2UgPSAoZnVuY3Rpb24gKCkge1xuXHRmdW5jdGlvbiBpbml0KCkgeyAvLyBzcmM6IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzAwMDgxMTQvaG93LWRvLWktcHJvbWlzaWZ5LW5hdGl2ZS14aHJcblx0XHQvKiBMb2NhbCBTdG9yYWdlIGFycmF5ICAqL1xuXHQgICAgaWYgKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiaG91c2VJRFwiKSA9PT0gbnVsbCB8fCBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImhvdXNlSURcIikgPT09IFwiXCIpIHtcblx0ICAgICAgICB2YXIgYXJyYXlJRCA9IFtdO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgICB2YXIgYXJyYXlJRCA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2hvdXNlSUQnKSk7XG5cdCAgICB9XG5cblx0XHQvLyBDcmVhdGUgYSBuZXcgdmFyaWFibGUgbmV3QXJyYXlJRCBmb3IgZHluYW1pYyBhZGRpbmcgZmF2b3VyaXRlcy5cblx0ICAgIHZhciBuZXdBcnJheUlEID0gYXJyYXlJRDtcblxuXHRcdC8vIEZpbmQgYnV0dG9uXG5cdFx0dmFyIF9mYXZvdXJpdGVCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZmF2b3VyaXRlLWJ0bicpO1xuXG5cdFx0Ly8gQ2hlY2sgaWYgSUQgaXMgc3RvcmVkIGluIGFycmF5IGFuZCBtYWtlIGJ1dHRvbiBhY3RpdmVcblx0XHRbXS5mb3JFYWNoLmNhbGwobmV3QXJyYXlJRCwgZnVuY3Rpb24oSUQpIHtcblx0XHRcdHZhciBfZmF2b3VyaXRlQnV0dG9uSUQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZmF2b3VyaXRlLWJ0blt2YWx1ZT1cIicgKyBJRCArICdcIl0nKTtcblx0XHRcdGlmKF9mYXZvdXJpdGVCdXR0b25JRCkge1xuXHRcdFx0XHRfZmF2b3VyaXRlQnV0dG9uSUQuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG5cdFx0XHR9XG5cdCBcdH0pO1xuXG5cdFx0Ly8gRmF2b3VyaXRlIGJ1dHRvbiBldmVudGxpc3RlbmVyXG5cdFx0W10uZm9yRWFjaC5jYWxsKF9mYXZvdXJpdGVCdXR0b24sIGZ1bmN0aW9uKGJ1dHRvbikge1xuICAgICAgICAgICAgLy92YXIgYnV0dG9uSUQgPSBidXR0b24uZ2V0QXR0cmlidXRlKCdkYXRhLWlkJyk7XG4gICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzdG9yZUlELCBmYWxzZSk7XG4gICAgICAgIH0pO1xuXG5cdFx0ZnVuY3Rpb24gc3RvcmVJRChldmVudCkge1xuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICAgICAgdmFyIGNsaWNrZWRJRCA9IHRoaXMuZ2V0QXR0cmlidXRlKCd2YWx1ZScpO1xuICAgICAgICAgICAgYXJyYXlJRC5wdXNoKGNsaWNrZWRJRCk7XG5cblx0XHRcdC8vIFJlbW92ZSBjbGFzc1xuXHRcdFx0dGhpcy5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcblxuXHRcdFx0LyogIENIRUNLIEZPUiBEVVBMSUNBVEVEIElEJ3MgLSBzcmM6IGh0dHBzOi8vanNmaWRkbGUubmV0L0J1bWJsZUIybmEvWHZnVGIvMS8gKi9cbiAgICAgICAgICAgIGZvciAodmFyIGggPSAwOyBoIDwgbmV3QXJyYXlJRC5sZW5ndGg7IGgrKykge1xuICAgICAgICAgICAgICAgIHZhciBjdXJJdGVtID0gbmV3QXJyYXlJRFtoXSxcbiAgICAgICAgICAgICAgICAgICAgZm91bmRDb3VudCA9IDA7XG4gICAgICAgICAgICAgICAgLy8gc2VhcmNoIGFycmF5IGZvciBpdGVtXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuZXdBcnJheUlELmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXdBcnJheUlEW2ldID09IGFycmF5SURbaF0pXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3VuZENvdW50Kys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChmb3VuZENvdW50ID4gMSkge1xuICAgICAgICAgICAgICAgICAgICAvLyByZW1vdmUgcmVwZWF0ZWQgaXRlbSBmcm9tIG5ldyBhcnJheVxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG5ld0FycmF5SUQubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXdBcnJheUlEW2pdID09IGN1ckl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdBcnJheUlELnNwbGljZShqLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqID0gaiAtIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy90aGlzLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdGhpcy5pbm5lckhUTUwgPSAnQWRkIHRvIGZhdm91cml0ZXMnO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuXHRcdFx0Ly8gQ2hlY2sgaWYgSUQgaXMgc3RvcmVkIGluIGFycmF5IGFuZCBtYWtlIGJ1dHRvbiBhY3RpdmVcblx0XHRcdFtdLmZvckVhY2guY2FsbChuZXdBcnJheUlELCBmdW5jdGlvbihJRCkge1xuXHRcdFx0XHR2YXIgX2Zhdm91cml0ZUJ1dHRvbklEID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZhdm91cml0ZS1idG5bdmFsdWU9XCInICsgSUQgKyAnXCJdJyk7XG5cdFx0XHRcdGlmKF9mYXZvdXJpdGVCdXR0b25JRCkge1xuXHRcdFx0XHRcdF9mYXZvdXJpdGVCdXR0b25JRC5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdGFkZFN0b3JhZ2UoJ2hvdXNlSUQnLCBuZXdBcnJheUlEKTtcblx0XHR9O1xuXG5cdFx0ZnVuY3Rpb24gYWRkU3RvcmFnZShrZXksIHZhbHVlKSB7IC8vIHNyYzogaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vRmx1aWRieXRlLzQ3MTgzODBcblx0ICAgICAgICB2YXIgbHNTdXBwb3J0O1xuXG5cdCAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnRlc3QgPSAxO1xuXHQgICAgICAgICAgICBsc1N1cHBvcnQgPSB0cnVlO1xuXHQgICAgICAgIH0gY2F0Y2ggKGUpIHtcblx0ICAgICAgICAgICAgbHNTdXBwb3J0ID0gZmFsc2U7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgLy8gSWYgdmFsdWUgaXMgZGV0ZWN0ZWQsIHNldCBuZXcgb3IgbW9kaWZ5IHN0b3JlXG5cdCAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiB2YWx1ZSAhPT0gbnVsbCkge1xuXHQgICAgICAgICAgICAvLyBDb252ZXJ0IG9iamVjdCB2YWx1ZXMgdG8gSlNPTlxuXHQgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuXHQgICAgICAgICAgICAgICAgdmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgLy8gU2V0IHRoZSBzdG9yZVxuXHQgICAgICAgICAgICBpZiAobHNTdXBwb3J0KSB7IC8vIE5hdGl2ZSBzdXBwb3J0XG5cdCAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIHZhbHVlKTtcblx0ICAgICAgICAgICAgfSBlbHNlIHsgLy8gVXNlIENvb2tpZVxuXHQgICAgICAgICAgICAgICAgY3JlYXRlQ29va2llKGtleSwgdmFsdWUsIDMwKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIC8vIE5vIHZhbHVlIHN1cHBsaWVkLCByZXR1cm4gdmFsdWVcblx0ICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiKSB7XG5cdCAgICAgICAgICAgIC8vIEdldCB2YWx1ZVxuXHQgICAgICAgICAgICBpZiAobHNTdXBwb3J0KSB7IC8vIE5hdGl2ZSBzdXBwb3J0XG5cdCAgICAgICAgICAgICAgICBkYXRhID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KTtcblx0ICAgICAgICAgICAgfSBlbHNlIHsgLy8gVXNlIGNvb2tpZVxuXHQgICAgICAgICAgICAgICAgZGF0YSA9IHJlYWRDb29raWUoa2V5KTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIFRyeSB0byBwYXJzZSBKU09OLi4uXG5cdCAgICAgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICAgICAgICBkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcblx0ICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuXHQgICAgICAgICAgICAgICAgZGF0YSA9IGRhdGE7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gZGF0YTtcblxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIC8vIE51bGwgc3BlY2lmaWVkLCByZW1vdmUgc3RvcmVcblx0ICAgICAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcblx0ICAgICAgICAgICAgaWYgKGxzU3VwcG9ydCkgeyAvLyBOYXRpdmUgc3VwcG9ydFxuXHQgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oa2V5KTtcblx0ICAgICAgICAgICAgfSBlbHNlIHsgLy8gVXNlIGNvb2tpZVxuXHQgICAgICAgICAgICAgICAgY3JlYXRlQ29va2llKGtleSwgJycsIC0xKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENyZWF0ZXMgbmV3IGNvb2tpZSBvciByZW1vdmVzIGNvb2tpZSB3aXRoIG5lZ2F0aXZlIGV4cGlyYXRpb25cblx0ICAgICAgICAgKiBAcGFyYW0gIGtleSAgICAgICBUaGUga2V5IG9yIGlkZW50aWZpZXIgZm9yIHRoZSBzdG9yZVxuXHQgICAgICAgICAqIEBwYXJhbSAgdmFsdWUgICAgIENvbnRlbnRzIG9mIHRoZSBzdG9yZVxuXHQgICAgICAgICAqIEBwYXJhbSAgZXhwICAgICAgIEV4cGlyYXRpb24gLSBjcmVhdGlvbiBkZWZhdWx0cyB0byAzMCBkYXlzXG5cdCAgICAgICAgICovXG5cdCAgICAgICAgZnVuY3Rpb24gY3JlYXRlQ29va2llKGtleSwgdmFsdWUsIGV4cCkge1xuXHQgICAgICAgICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKCk7XG5cdCAgICAgICAgICAgIGRhdGUuc2V0VGltZShkYXRlLmdldFRpbWUoKSArIChleHAgKiAyNCAqIDYwICogNjAgKiAxMDAwKSk7XG5cdCAgICAgICAgICAgIHZhciBleHBpcmVzID0gXCI7IGV4cGlyZXM9XCIgKyBkYXRlLnRvR01UU3RyaW5nKCk7XG5cdCAgICAgICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGtleSArIFwiPVwiICsgdmFsdWUgKyBleHBpcmVzICsgXCI7IHBhdGg9L1wiO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIFJldHVybnMgY29udGVudHMgb2YgY29va2llXG5cdCAgICAgICAgICogQHBhcmFtICBrZXkgICAgICAgVGhlIGtleSBvciBpZGVudGlmaWVyIGZvciB0aGUgc3RvcmVcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBmdW5jdGlvbiByZWFkQ29va2llKGtleSkge1xuXHQgICAgICAgICAgICB2YXIgbmFtZUVRID0ga2V5ICsgXCI9XCI7XG5cdCAgICAgICAgICAgIHZhciBjYSA9IGRvY3VtZW50LmNvb2tpZS5zcGxpdCgnOycpO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbWF4ID0gY2EubGVuZ3RoOyBpIDwgbWF4OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIHZhciBjID0gY2FbaV07XG5cdCAgICAgICAgICAgICAgICB3aGlsZSAoYy5jaGFyQXQoMCkgPT09ICcgJykgYyA9IGMuc3Vic3RyaW5nKDEsIGMubGVuZ3RoKTtcblx0ICAgICAgICAgICAgICAgIGlmIChjLmluZGV4T2YobmFtZUVRKSA9PT0gMCkgcmV0dXJuIGMuc3Vic3RyaW5nKG5hbWVFUS5sZW5ndGgsIGMubGVuZ3RoKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICByZXR1cm4gbnVsbDtcblx0ICAgICAgICB9XG5cdFx0ICAgIH07XG4gICAgfTtcblxuXHRyZXR1cm4ge1xuICAgICAgICBpbml0OiBpbml0XG4gICAgfTtcblxufSkoKTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
