"use strict";function _defineProperty(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}var APP=APP||{};APP.launcher=function(){function e(){document.addEventListener("DOMContentLoaded",function(){APP.geo.getLocation()})}return{init:e}}(),APP.launcher.init(),APP.data=function(e){function t(e){return new Promise(function(t,o){var n=new XMLHttpRequest;n.open("GET",e,!0),n.onload=function(){this.status>=200&&this.status<300?t(n.response):o({status:this.status,statusText:n.statusText})},n.onerror=function(){o({status:this.status,statusText:n.statusText})},n.send()})}function o(e){var t="json",o="e2d60e885b8742d4b0648300e3703bd7",n="koop",e=e,i="1",a="25",r="http://funda.kyrandia.nl/feeds/Aanbod.svc/"+t+"/"+o+"/?type="+n+"&zo=/"+e+"&page="+i+"&pagesize="+a;APP.data.request(r).then(function(t){var o=JSON.parse(t),n=[];[].forEach.call(o.Objects,function(e){if(1==e.HeeftVideo){var t={id:e.Id};n.push(t)}}),console.log(n),APP.router.init(n,e)})}function n(e){var t="json",o="e2d60e885b8742d4b0648300e3703bd7",n="koop",e=e,i="1",a="25",r="http://funda.kyrandia.nl/feeds/Aanbod.svc/"+t+"/"+o+"/?type="+n+"&zo=/"+e+"&page="+i+"&pagesize="+a;APP.data.request(r).then(function(e){var t=JSON.parse(e);console.log(t);var o=[];[].forEach.call(t.Objects,function(e){var t={id:e.Id,title:e.Adres,photo:e.FotoLargest,postalcode:e.Postcode,place:e.Woonplaats,price:e.Prijs.Koopprijs};o.push(t)}),console.log(o),APP.page.houseFavourites(o)})}function i(e){var t="json",o="e2d60e885b8742d4b0648300e3703bd7",e=e,n="koop",i="http://funda.kyrandia.nl/feeds/Aanbod.svc/"+t+"/detail/"+o+"/"+n+"/"+e+"/";APP.data.request(i).then(function(e){var t=JSON.parse(e);console.log(t);var o,n,i,a=[];for(o=0;o<t.Media.length-12;o++)n=t.Media[o],void 0!=n.MediaItems[3]&&(i=n.MediaItems[3].Url),console.log(i),a.push({photo:i});console.log(a);var r=[],s={id:t.InternalId,title:t.Titels[0].Omschrijving,photos:a,description:t.VolledigeOmschrijving,price:t.KoopPrijs,url:t.URL};r.push(s),console.log(r),APP.page.houseDetail(r)})}function a(e,t){var o="json",n="e2d60e885b8742d4b0648300e3703bd7",e=e,i="koop",a="http://funda.kyrandia.nl/feeds/Aanbod.svc/"+o+"/detail/"+n+"/"+i+"/"+e+"/";APP.data.request(a).then(function(o){var n=JSON.parse(o),i=function(o){var n=0,i=t.length;for(n;i>n;n+=1)if(t[n].id===e)return t[n+1];return"not found"},a=function(o){var n=0,i=t.length;for(n;i>n;n+=1)if(t[n].id===e)return t[n-1];return"not found"},r=i(e),s=a(e);if(void 0==s)var u={id:e,nextID:r.id,title:n.Titels[0].Omschrijving,buyPrice:n.Prijs.Koopprijs,videoURL:n.Video.Videos[0].Cdns[0].Url};else if(void 0==r)var u={id:e,prevID:s.id,title:n.Titels[0].Omschrijving,buyPrice:n.Prijs.Koopprijs,videoURL:n.Video.Videos[0].Cdns[0].Url};else var u={id:e,nextID:r.id,prevID:s.id,title:n.Titels[0].Omschrijving,buyPrice:n.Prijs.Koopprijs,videoURL:n.Video.Videos[0].Cdns[0].Url};console.log(u),APP.page.houseVideo(u)})}return _defineProperty({request:t,getHouses:o,getHouseFavourites:n,getHouseVideo:a,getHouseDetail:i},"getHouseDetail",i)}(),APP.geo=function(){function e(){navigator.geolocation&&navigator.geolocation.getCurrentPosition(t,o,{enableHighAccuracy:!0,maximumAge:0})}function t(e){var t=["http://nominatim.openstreetmap.org/reverse?format=json&lat=","&lon="],o=e.coords.latitude,n=e.coords.longitude,i="&zoom=13&addressdetails=1",a=t[0]+o+t[1]+n+i;APP.data.request(a).then(function(e){var t=JSON.parse(e),o=t.address.city||t.address.town;localStorage.setItem("Location",o),console.log(o),APP.data.getHouses(o)})}function o(){console.log("an error has occured")}return{getLocation:e,displayPosition:t}}(),APP.page=function(){function e(e){APP.data.request("./dist/templates/house-videos.mst").then(function(t){n.innerHTML=Mustache.render(t,e),i.classList.remove("active"),APP.storage.init()})}function t(e){APP.data.request("./dist/templates/house-detail.mst").then(function(t){n.innerHTML=Mustache.render(t,e),i.classList.remove("active")})}function o(e){if(null!=localStorage.getItem("houseID"))var t=localStorage.getItem("houseID");else var t=[];var e=e.filter(function(e){return-1!=t.indexOf(e.id)});console.log(e),APP.data.request("./dist/templates/house-favourites.mst").then(function(t){n.innerHTML=Mustache.render(t,e),i.classList.remove("active"),APP.storage.init()})}var n=document.querySelector("main"),i=document.getElementById("loader");return{houseVideo:e,houseDetail:t,houseFavourites:o}}(),APP.router=function(){function e(e,t){window.location.hash||(window.location="#videoID="+e[0].id),routie({"videoID=:ID":function(t){APP.data.getHouseVideo(t,e)},"houseDetail=:ID":function(e){APP.data.getHouseDetail(e)},favourites:function(){APP.data.getHouseFavourites(t)}})}return{init:e}}();var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e};APP.storage=function(){function e(){function e(e){e.preventDefault();var i=this.getAttribute("value");o.push(i),this.classList.remove("active");for(var a=0;a<n.length;a++){for(var r=n[a],s=0,u=0;u<n.length;u++)n[u]==o[a]&&s++;if(s>1)for(var c=0;c<n.length;c++)n[c]==r&&(n.splice(c,1),c-=1)}[].forEach.call(n,function(e){var t=document.querySelector('.favourite-btn[value="'+e+'"]');t&&t.classList.add("active")}),t("houseID",n)}function t(e,t){function o(e,t,o){var n=new Date;n.setTime(n.getTime()+24*o*60*60*1e3);var i="; expires="+n.toGMTString();document.cookie=e+"="+t+i+"; path=/"}function n(e){for(var t=e+"=",o=document.cookie.split(";"),n=0,i=o.length;i>n;n++){for(var a=o[n];" "===a.charAt(0);)a=a.substring(1,a.length);if(0===a.indexOf(t))return a.substring(t.length,a.length)}return null}var i;try{localStorage.test=1,i=!0}catch(a){i=!1}if("undefined"!=typeof t&&null!==t&&("object"===("undefined"==typeof t?"undefined":_typeof(t))&&(t=JSON.stringify(t)),i?localStorage.setItem(e,t):o(e,t,30)),"undefined"==typeof t){i?data=localStorage.getItem(e):data=n(e);try{data=JSON.parse(data)}catch(a){data=data}return data}null===t&&(i?localStorage.removeItem(e):o(e,"",-1))}if(null===localStorage.getItem("houseID")||""===localStorage.getItem("houseID"))var o=[];else var o=JSON.parse(localStorage.getItem("houseID"));var n=o,i=document.querySelectorAll(".favourite-btn");[].forEach.call(n,function(e){var t=document.querySelector('.favourite-btn[value="'+e+'"]');t&&t.classList.add("active")}),[].forEach.call(i,function(t){t.addEventListener("click",e,!1)})}return{init:e}}();
//# sourceMappingURL=data:application/json;base64,
